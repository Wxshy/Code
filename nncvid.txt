import numpy as np

class NeuralNework():
    def __init__(self):
        np.random.seed(1)
        self.synaptic_weights = 2 * np.random.random((3,1)) - 1
        
    def sigmoid(self,x):
        return 1 /(1+np.exp(-x))
    
    def sigmoid_derivative(self, x):
        return x * (1-x)
        
    def train(self, training_inputs, training_outputs, training_iterations):
        for iteration in range(training_iterations):
            output = self.think(training_inputs)
            error = training_outputs - output
            adjusment = np.dot(training_inputs.T,error*self.sigmoid_derivative(output))
            self.synaptic_weights += adjusment
            
    def think(self,inputs):
        inputs = inputs.astype(float)
        output=self.sigmoid(np.dot(inputs, self.synaptic_weights))
        
        return output
        
if _name_ == "__main__":
    neural_network=NeuralNework()
    print('random weight')
    print(neural_network.synaptic_weights)
    training_input = np.array([[0,0,1],[1,1,1],[1,0,1],[0,1,1]])
    training_output = np.array([[0,1,1,0]]).T
    neural_network.train(training_input, training_output, 10000)
    print('synaptic_weights trainign')
    print(neural_network.synaptic_weights)
    A=str(input('input 1: '))
    B=str(input('input 2: '))
    C=str(input('input 3: '))
    
    print('new situasion input data = ',A,B,C)
    print('output data : ')
    print(neural_network.think(np.array([A, B, C])))